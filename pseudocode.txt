===================================
ROB K PROJECT PROPOSAL PSEUDOCODE
===================================

- Create the universe
    easier said than done but we'll figure it out.

- On pageload, build the basic HTML framework of the website, including:
    - Header information
    - Navigation sidebar
    - Main body that will include the blog posts themselves
    - footers
        - all these can be built as components to be accessed dynamically, the goal of the project being that the page never actually changes "pages" and everything is done through the built in functionality of React live updating 'stuff.'
    - general styling

- Access firebase to produce and populate a list of blog posts 
    - Blog posts will be a series of objects contained within firebase, including all the information on them (title, author, content, etc etc, potentially even broader html markup)
    - Pull that information in from firebase as an array, which will be read from 'most recent' downwards, up to a maximum number of blog posts per page
        - don't necessarily need to pull all the information, just how many and the ids for those blog posts, can access based on produced ids when needed
    - render that object detail through a recursive build that just loop html creation functionality for each one, 
    - build a "show more" button that will make earlier blog posts visible
        - write in conditionals to find out the total size of blog post array and display a number of them (5?), and then have a 'show more' button that can make more appear up until the total list is exhausted

- access more detailed information about the blog post when clicked on
    - access the entire blogpost object, and specifically render that to the page, and remove the other information on the page

- have a functional 'home' button that essentially resets the page, unloading and reloading the appropriate elements on the page.
- have a functional nav bar that lists a shorthand version of all the blog posts down to a certain point, and maybe can direct to a complete archive of blog posts

= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =

I'm really bad at pseudocode, I feel like I'm not quite comfortable with React just yet to know all the proper terms and applications of features to "describe" how to apply them, but I think I have a decent basic understanding of how pieces can interact, and it's more a matter of practicing with those ideas to get a better sense of what and how and when to call them.  

= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =


